name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-flask black flake8

    - name: Check code formatting
      run: |
        black --check --line-length 100 *.py
        flake8 --max-line-length=100 --ignore=E203,W503 *.py

    - name: Create test environment
      run: |
        mkdir -p uploads
        echo "DEEPSEEK_API_KEY=test_key" > .env
        echo "FLASK_SECRET_KEY=test_secret_key" >> .env
        echo "FLASK_ENV=testing" >> .env

    - name: Run tests
      run: |
        python -m pytest --cov=app --cov-report=xml --cov-report=term-missing
      env:
        REDIS_URL: redis://localhost:6379

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt

    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: contract-explainer:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container -p 5001:5001 contract-explainer:test
        sleep 10
        curl -f http://localhost:5001/health || exit 1
        docker stop test-container

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security-scan, docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Railway (Staging)
      run: |
        echo "Deploying to Railway staging environment..."
        # Add Railway deployment script here
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN_STAGING }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security-scan, docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Deploy to Multiple Platforms
      run: |
        echo "Starting production deployment..."
        python deploy/deploy.py --platform ${{ vars.DEPLOY_PLATFORM || 'railway' }}
      env:
        # Platform-specific tokens (set in GitHub repository secrets)
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        
        # Application secrets
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        FLASK_SECRET_KEY: ${{ secrets.FLASK_SECRET_KEY }}
        SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

    - name: Health Check
      run: |
        sleep 30
        curl -f ${{ vars.PRODUCTION_URL }}/health || exit 1
        echo "Production deployment successful!"

    - name: Notify Slack
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "üöÄ Contract Explainer deployed to production successfully!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify on Failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "‚ùå Contract Explainer production deployment failed!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run performance tests
      run: |
        k6 run tests/performance/load-test.js
      env:
        TARGET_URL: ${{ vars.PRODUCTION_URL }}

  lighthouse-audit:
    name: Lighthouse Audit
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          ${{ vars.PRODUCTION_URL }}
        configPath: './lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true